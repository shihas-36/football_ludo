// lib/screens/game_screen.dart

import 'package:flutter/material.dart';
import 'dart:math';
import '../models/player.dart';
import '../widgets/board_tile.dart';
import '../widgets/dice_3d.dart';
import 'winner_screen.dart';
import 'package:football_ludo/widgets/constants.dart';

class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _GameScreenState();
}

class _GameScreenState extends State<GameScreen> {
  final GlobalKey _scoreKey = GlobalKey();
  late Player player1;
  late Player player2;
  late Player currentPlayer;
  late Player lastPlayer;
  int diceRoll = 1;
  bool isSecondRoll = false;
  bool isExtraRoll = false;
  int extra = 7;
  @override
  void initState() {
    super.initState();
    player1 = Player(name: 'RED', color: Colors.red);
    player2 = Player(name: 'BLUE', color: Colors.blue);

    currentPlayer = player1;
    lastPlayer = currentPlayer;
  }

  void rollDice() {
    setState(() {
      currentPlayer.work = "PLAY ONNN";
      diceRoll = Random().nextInt(6) + 1;
      int newPos = currentPlayer.position;
      if (isSecondRoll == true) {
        isSecondRoll = false;
        if ([1, 3, 6].contains(diceRoll)) {
          currentPlayer.addPoints(1);
          currentPlayer.work = "SCORE";
        } 
        currentPlayer = (currentPlayer == player1) ? player2 : player1;
        return;
      }
      
      newPos = currentPlayer.position + diceRoll;

      if (newPos <= 90) {
        currentPlayer.moveTo(newPos);
      } 
      if (blueTiles.contains(newPos)) 
          
        isSecondRoll = true;
      } else {
        currentPlayer = (currentPlayer == player1) ? player2 : player1;
        lastPlayer = (currentPlayer == player1) ? player2 : player1;
      }
      
  )
    };
  }

  Widget _buildScoreCard(Player player) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      color: Colors.white,
      child: Container(
        padding: const EdgeInsets.all(16),
        width: 150,
        height: 125,
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              player.name,
              style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.black),
            ),
            const SizedBox(height: 8),
            Text(
              "Score: ${player.score}",
              style: const TextStyle(fontSize: 16, color: Colors.green),
            ),
            Text(
              "warning: ${player.ref}",
              style: const TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    List<Widget> tiles = [];
    bool leftToRight = true;

    for (int row = 8; row >= 0; row--) {
      List<Widget> rowTiles = [];
      for (int col = 0; col < 10; col++) {
        int number = row * 10 + col + 1;

        List<Player> playersOnTile = [];
        if (player1.position == number) playersOnTile.add(player1);
        if (player2.position == number) playersOnTile.add(player2);

        rowTiles.add(
          BoardTile(
            number: number,
            playersOnTile: playersOnTile,
          ),
        );
      }

      if (!leftToRight) {
        rowTiles = rowTiles.reversed.toList();
      }

      tiles.addAll(rowTiles);
      leftToRight = !leftToRight;
    }

    return Scaffold(
      backgroundColor: Colors.grey[200],
      appBar: AppBar(
        title: const Text("Snake & Ladder Game"),
        centerTitle: true,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Score Cards
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 10),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                _buildScoreCard(player1),
                _buildScoreCard(player2),
              ],
            ),
          ),

          const SizedBox(height: 10),

          // Game Board
          Center(
            child: AspectRatio(
              aspectRatio: 1, // Keep board square
              child: Container(
                padding: const EdgeInsets.all(4),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.black),
                ),
                child: GridView.count(
                  crossAxisCount: 10,
                  children: tiles,
                  physics: const NeverScrollableScrollPhysics(),
                ),
              ),
            ),
          ),

          const SizedBox(height: 20),

          // Dice Button
          // Replace the existing dice section in your build method with this:

// Dice Section with new design
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: Row(
              children: [
                // Left Black Box - Player Turn
                Expanded(
                  flex: 2,
                  child: Container(
                    height: 80,
                    decoration: BoxDecoration(
                      color: currentPlayer.color,
                      borderRadius: const BorderRadius.only(
                        topLeft: Radius.circular(12),
                        bottomLeft: Radius.circular(12),
                      ),
                      border: Border.all(color: Colors.purple, width: 3),
                    ),
                    child: Center(
                      child: Text(
                        "${currentPlayer.name.toUpperCase()}'S\nTURN",
                        textAlign: TextAlign.center,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          height: 1.2,
                        ),
                      ),
                    ),
                  ),
                ),

                // Middle Circle - Dice
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: Colors.grey[400],
                    shape: BoxShape.circle,
                    border: Border.all(color: Colors.purple, width: 3),
                  ),
                  child: GestureDetector(
                    onTap: rollDice,
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      child: Image.asset(
                        'assets/dice$diceRoll.png',
                        fit: BoxFit.contain,
                      ),
                    ),
                  ),
                ),

                // Right Blue Box - Score/Tile Color
                Expanded(
                  flex: 2,
                  child: Container(
                    height: 80,
                    decoration: BoxDecoration(
                      color: lastPlayer.color,
                      borderRadius: const BorderRadius.only(
                        topRight: Radius.circular(12),
                        bottomRight: Radius.circular(12),
                      ),
                      border: Border.all(color: Colors.purple, width: 3),
                    ),
                    child: Center(
                      child: Text(
                        lastPlayer.work,
                        style: const TextStyle(
                          color: Colors.white,
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
